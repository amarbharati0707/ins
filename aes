from Crypto.Cipher import AES
import base64
import random
import string

def encrypt(message, key):
    padded_message = message + (16 - len(message) % 16) * chr(16 - len(message) % 16)
    cipher = AES.new(key.encode(), AES.MODE_ECB)
    encrypted_message = cipher.encrypt(padded_message.encode())
    encoded_message = base64.b64encode(encrypted_message).decode()
    return encoded_message

def decrypt(encoded_message, key):
    encrypted_message = base64.b64decode(encoded_message)
    cipher = AES.new(key.encode(), AES.MODE_ECB)
    decrypted_message = cipher.decrypt(encrypted_message)
    unpadded_message = decrypted_message[:-decrypted_message[-1]]
    return unpadded_message.decode()

key = ''.join(random.choices(string.ascii_lowercase, k=16))
message = input("Enter the Message: ")
encrypted_message = encrypt(message, key)
print('Encrypted message:', encrypted_message)
decrypted_message = decrypt(encrypted_message, key)
print('Decrypted message:', decrypted_message)

# Install pycryptodome using : pip install pycryptodome


---

import java.util.Scanner;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.nio.charset.StandardCharsets;

public class AES {
    Cipher ecipher, dcipher;

    public static void main(String args[]) {
        System.out.println("Enter any String: ");
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        try {
            // Generate or load a secure key
            SecretKey key = generateAESKey();

            AES en = new AES(key);
            String ct = en.encrypt(input);
            String decrypted = en.decrypt(ct);
            System.out.println("Original string is: " + input);
            System.out.println("Encrypted string is: " + ct);
            System.out.println("Decrypted string is: " + decrypted);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public AES(SecretKey key) {
        try {
            ecipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            ecipher.init(Cipher.ENCRYPT_MODE, key);
            dcipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            dcipher.init(Cipher.DECRYPT_MODE, key);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String encrypt(String str) {
        try {
            byte[] b = str.getBytes(StandardCharsets.UTF_8);
            byte[] enc = ecipher.doFinal(b);
            return new String(enc, StandardCharsets.ISO_8859_1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public String decrypt(String str) {
        try {
            byte[] b = str.getBytes(StandardCharsets.ISO_8859_1);
            byte[] dec = dcipher.doFinal(b);
            return new String(dec, StandardCharsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static SecretKey generateAESKey() {
        try {
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(128);
            return keyGen.generateKey();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
