import base64
from Crypto.Cipher import DES
import random
import string

def pad_message(message):
    while len(message) % 8 != 0:
        message += ' '
    return message

def encrypt_message(key, message):
    cipher = DES.new(key.encode(), DES.MODE_ECB)
    message = pad_message(message).encode()
    encrypted = cipher.encrypt(message)
    return base64.b64encode(encrypted).decode()

def decrypt_message(key, encrypted):
    cipher = DES.new(key.encode(), DES.MODE_ECB)
    encrypted = base64.b64decode(encrypted.encode())
    decrypted = cipher.decrypt(encrypted)
    return decrypted.decode().rstrip()

key = ''.join(random.choices(string.ascii_lowercase, k=8))
message = input("Enter the Message: ")
encrypted = encrypt_message(key, message)
decrypted = decrypt_message(key, encrypted)
print('Encrypted message:', encrypted)
print('Decrypted message:', decrypted)

# Install pycryptodome using : pip install pycryptodome

---

import java.util.Scanner;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class DES {
    Cipher ecipher, dcipher;

    public static void main(String[] args) {
        System.out.println("Enter Any String : ");
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        try {
            KeyGenerator k = KeyGenerator.getInstance("DES");
            SecretKey key = k.generateKey();
            DES des = new DES(key);
            String ct = des.encrypt(input);
            String decrypted = des.decrypt(ct);
            System.out.println("Original String is : " + input);
            System.out.println("Encrypted String is : " + ct);
            System.out.println("Decrypted String is : " + decrypted);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public DES(SecretKey key) {
        try {
            ecipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            ecipher.init(Cipher.ENCRYPT_MODE, key);
            dcipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            dcipher.init(Cipher.DECRYPT_MODE, key);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String encrypt(String str) {
        try {
            byte[] utf8 = str.getBytes("UTF8");
            byte[] enc = ecipher.doFinal(utf8);
            byte[] encodedBytes = Base64.getEncoder().encode(enc);
            return new String(encodedBytes, "UTF-8");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public String decrypt(String str) {
        try {
            byte[] dec = Base64.getDecoder().decode(str);
            byte[] utf8 = dcipher.doFinal(dec);
            return new String(utf8, "UTF8");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
